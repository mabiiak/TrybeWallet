{"version":3,"sources":["components/Inputs.jsx","pages/Login.js","actions/index.js","components/header/header.js","components/Select.jsx","components/FormDespesas.js","components/tabela/Tabela.js","pages/Wallet.js","App.js","serviceWorker.js","reducers/user.js","reducers/wallet.js","reducers/index.js","store/store.js","index.js"],"names":["Input","this","props","type","dataTest","name","value","onChange","placeholder","nome","htmlFor","className","id","data-testid","React","Component","Login","handleChange","bind","validate","onClick","state","email","senha","disableButton","e","preventDefault","history","insertEmail","push","length","match","setState","target","onSubmit","role","aria-labelledby","disabled","connect","dispatch","newEmail","Header","expensesValues","valor","moedaEmRealBR","valorConvertido","map","despesa","Number","Object","values","exchangeRates","find","coin","code","currency","ask","console","log","toFixed","user","wallet","expenses","Select","arrayOptions","option","key","FormDespesas","despesas","description","method","tag","atribuiExchanges","createExpense","objCurrence","prevState","a","aboutCurrency","payload","nameCurrences","nameCurrence","moeda","currencies","fetch","then","response","json","returnFetch","obj","Gastos","Wallet","Tabela","App","exact","path","component","Boolean","window","location","hostname","INITIAL_USER","INITIAL_WALLET","reducer","combineReducers","action","keys","filter","current","store","createStore","composeWithDevTools","applyMiddleware","thunk","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.ccbca35c.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nclass Input extends React.Component {\n  render() {\n    const { type, dataTest, name, value, onChange, placeholder, nome } = this.props;\n    return (\n      <label htmlFor={ name }>\n        <input\n          className={ nome }\n          type={ type }\n          id={ name }\n          data-testid={ dataTest }\n          name={ name }\n          value={ value }\n          placeholder={ placeholder }\n          onChange={ onChange }\n        />\n      </label>\n    );\n  }\n}\n\nInput.propTypes = {\n  type: PropTypes.string.isRequired,\n  dataTest: PropTypes.string.isRequired,\n  name: PropTypes.string.isRequired,\n  value: PropTypes.string.isRequired,\n  onChange: PropTypes.func.isRequired,\n  placeholder: PropTypes.string.isRequired,\n  nome: PropTypes.string.isRequired,\n};\n\nexport default Input;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport './Login.css';\nimport { newEmail } from '../actions/index';\nimport Input from '../components/Inputs';\n\nclass Login extends React.Component {\n  constructor() {\n    super();\n\n    this.handleChange = this.handleChange.bind(this);\n    this.validate = this.validate.bind(this);\n    this.onClick = this.onClick.bind(this);\n\n    this.state = {\n      email: '',\n      senha: '',\n      disableButton: true,\n    };\n  }\n\n  onClick(e) {\n    e.preventDefault();\n    const { history, insertEmail } = this.props;\n\n    insertEmail(this.state);\n    history.push('/carteira');\n  }\n\n  validate() {\n    const { email, senha } = this.state;\n    const min = 6;\n\n    // Feito com ajuda do Ivan, e monitoria com a Samanta e o Felipe\n    // Retirado do site --> https://www.horadecodar.com.br/2020/09/13/como-validar-email-com-javascript/\n\n    const mailFormat = /\\S+@\\S+\\.\\S+/;\n\n    if (senha.length >= min && email.match(mailFormat)) {\n      this.setState({ disableButton: false });\n    } else {\n      this.setState({ disableButton: true });\n    }\n  }\n\n  handleChange({ target }) {\n    const { value, name } = target;\n\n    this.setState({ [name]: value }, () => this.validate());\n  }\n\n  render() {\n    const { disableButton } = this.state;\n\n    return (\n      <form className=\"pageLogin\" onSubmit={ this.onClick }>\n        <span className='emote' role=\"img\" aria-labelledby=\"coin\">💸</span>\n        <div >\n          <h1 className=\"tittleLogin\">\n            TrybeWallet\n          </h1>\n          <Input // email\n            nome=\"mail\"\n            dataTest=\"email-input\"\n            type=\"email\"\n            name=\"email\"\n            id=\"email\"\n            placeholder=\"Email\"\n            onChange={ this.handleChange }\n          />\n\n          <Input // senha\n            nome=\"senha\"\n            dataTest=\"password-input\"\n            type=\"password\"\n            id=\"senha\"\n            name=\"senha\"\n            placeholder=\"Senha\"\n            onChange={ this.handleChange }\n          />\n\n          <button type=\"submit\" disabled={ disableButton }>\n            Entrar\n          </button>\n        </div>\n        \n      </form>\n    );\n  }\n}\n\nLogin.propTypes = {\n  history: PropTypes.string.isRequired,\n  insertEmail: PropTypes.string.isRequired,\n};\n\nconst mapDispatchToProps = (dispatch) => ({\n  insertEmail: (state) => dispatch(newEmail(state)),\n});\n\nexport default connect(null, mapDispatchToProps)(Login);\n","// Coloque aqui suas actions\n\nexport const newEmail = (state) => ({\n  type: 'NEW_EMAIL',\n  state,\n});\n\n// ------------------------------------------------------\n\nexport const newExpense = (despesa) => ({\n  type: 'NEW_EXPENSE',\n  despesa,\n});\n\n// -------------------------------------------------------\n\nexport const returnFetch = (json) => ({\n  type: 'RECEIVE_CURRENCIE', payload: json,\n});\n\nexport function fetchAPI() {\n  return (dispatch) => (fetch('https://economia.awesomeapi.com.br/json/all')\n    .then((response) => response.json()\n      .then(\n        (json) => dispatch(returnFetch(json)),\n      ))\n  );\n}\n","import React from 'react';\nimport './header.css';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\n\n// referencia casas decimais: https://www.w3schools.com/jsref/jsref_tofixed.asp\n\nclass Header extends React.Component {\n  render() {\n    const { email, expensesValues } = this.props;\n    let valor = 0;\n    let moedaEmRealBR = '';\n    let valorConvertido = 0;\n\n    expensesValues.map((despesa) => {\n      valor = Number(despesa.value);\n      moedaEmRealBR = Object.values(despesa.exchangeRates)\n        .find((coin) => coin.code === despesa.currency).ask; // ajuda do Mateus Turola para identificar essa ask\n      valorConvertido += (valor * Number(moedaEmRealBR));\n      return valorConvertido;\n    });\n\n    return (\n      <div className=\"headerInfo\">\n        <span role=\"img\" aria-labelledby=\"coin\">💸</span>\n        <p data-testid=\"email-field\">{ email }</p>\n        { console.log(expensesValues)}\n        <p data-testid=\"total-field\">\n          { valorConvertido.toFixed(2) }\n        </p>\n        <p data-testid=\"header-currency-field\">BRL</p>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  email: state.user.email,\n  expensesValues: state.wallet.expenses,\n});\n\nHeader.propTypes = {\n  email: PropTypes.string.isRequired,\n  expensesValues: PropTypes.string.isRequired,\n};\n\nexport default connect(mapStateToProps, null)(Header);\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nclass Select extends React.Component {\n  render() {\n    const { dataTest, id, name, onChange, value, arrayOptions } = this.props;\n    return (\n      <label htmlFor={ id }>\n        { id }\n        <select\n          data-testid={ dataTest }\n          id={ id }\n          name={ name }\n          onChange={ onChange }\n          value={ value }\n        >\n          {\n            arrayOptions.map((option) => (\n              <option key={ option }>{option}</option>\n            ))\n          }\n        </select>\n      </label>\n    );\n  }\n}\n\nSelect.propTypes = {\n  dataTest: PropTypes.string.isRequired,\n  name: PropTypes.string.isRequired,\n  value: PropTypes.string.isRequired,\n  onChange: PropTypes.func.isRequired,\n  arrayOptions: PropTypes.arrayOf(Object).isRequired,\n  id: PropTypes.string.isRequired,\n};\n\nexport default Select;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport './form.css';\nimport { connect } from 'react-redux';\nimport { fetchAPI, newExpense } from '../actions/index';\nimport Input from './Inputs';\nimport Select from './Select';\n\nclass FormDespesas extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      despesas: [],\n      value: '',\n      description: '',\n      method: '',\n      tag: '',\n      currency: '',\n      id: 0,\n      exchangeRates: '',\n    };\n\n    this.handleChange = this.handleChange.bind(this);\n    this.onClick = this.onClick.bind(this);\n    this.atribuiExchanges = this.atribuiExchanges.bind(this);\n  }\n\n  componentDidMount() {\n    this.atribuiExchanges();\n  }\n\n  onClick(e) {\n    e.preventDefault();\n    const { createExpense, objCurrence } = this.props;\n    const {\n      despesas, value, description, method, tag, currency, id, exchangeRates,\n    } = this.state;\n\n    objCurrence();\n\n    // cria localmente todas as despesas para gerar o id, e limpa os inputs\n    this.setState((prevState) => ({\n      id: despesas.length + 1,\n      despesas: [\n        prevState.despesas, { value, description, method, tag, currency, id }],\n      value: '',\n      description: '',\n      method: '',\n      tag: '',\n      currency: '',\n    }));\n\n    createExpense({ value, description, method, tag, currency, id, exchangeRates });\n  }\n\n  async atribuiExchanges() { // Tatamento feito com ajuda do João Veidz\n    const { objCurrence } = this.props;\n    const aboutCurrency = await objCurrence();\n    this.setState({ exchangeRates: aboutCurrency.payload });\n  }\n\n  handleChange({ target }) {\n    const { name, value } = target;\n    this.setState({ [name]: value });\n  }\n\n  render() {\n    const { nameCurrences } = this.props;\n    const { value, description, method, tag, currency } = this.state;\n    const nameCurrence = [];\n    const formaDePagamento = ['Dinheiro', 'Cartão de crédito', 'Cartão de débito'];\n    const tiposDeTag = ['Alimentação', 'Lazer', 'Trabalho', 'Transporte', 'Saúde'];\n\n    return (\n      <form className=\"despesas\">\n        <Input // descrição\n          type=\"text\"\n          dataTest=\"description-input\"\n          name=\"description\"\n          value={ description }\n          placeholder=\"Descrição\"\n          onChange={ this.handleChange }\n        />\n\n        <Select // tipo de tag\n          dataTest=\"tag-input\"\n          id=\"Tag\"\n          name=\"tag\"\n          onChange={ this.handleChange }\n          value={ tag }\n          arrayOptions={ tiposDeTag }\n        />\n\n        <Select // tipo de pagamento\n          dataTest=\"method-input\"\n          id=\"Método de pagamento\"\n          name=\"method\"\n          onChange={ this.handleChange }\n          value={ method }\n          arrayOptions={ formaDePagamento }\n        />\n\n        <Input // valor\n          type=\"number\"\n          dataTest=\"value-input\"\n          name=\"value\"\n          value={ value }\n          placeholder=\"Valor\"\n          onChange={ this.handleChange }\n        />\n\n        <Select // tipo de moeda\n          dataTest=\"currency-input\"\n          id=\"moeda\"\n          name=\"currency\"\n          onChange={ this.handleChange }\n          value={ currency }\n          arrayOptions={ nameCurrence }\n          { ...nameCurrences.map((moeda) => nameCurrence.push(moeda)) }\n        />\n\n        <button type=\"submit\" onClick={ this.onClick }>\n          Adicionar despesa\n        </button>\n      </form>\n    );\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => ({\n  objCurrence: () => dispatch(fetchAPI()),\n  createExpense: (obj) => dispatch(newExpense(obj)),\n});\n\nconst mapStateToProps = (state) => ({\n  nameCurrences: state.wallet.currencies,\n});\n\nFormDespesas.propTypes = {\n  objCurrence: PropTypes.func.isRequired,\n  nameCurrences: PropTypes.objectOf(Array).isRequired,\n  createExpense: PropTypes.func.isRequired,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(FormDespesas);\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport './tabela.css';\nimport PropTypes from 'prop-types';\n\nclass Gastos extends React.Component {\n  render() {\n    const { despesas } = this.props;\n\n    return (\n      <table className=\"table\">\n        <thead className=\"cabecalho\">\n          <th>Descrição</th>\n          <th>Tag</th>\n          <th>Método de pagamento</th>\n          <th>Valor</th>\n          <th>Moeda</th>\n          <th>Câmbio utilizado</th>\n          <th>Valor convertido</th>\n          <th>Moeda de conversão</th>\n          <th>Editar/Excluir</th>\n        </thead>\n        <tbody className=\"detalhes\">\n          {\n            despesas.map((despesa) => (\n              <tr key={ despesa.id }>\n                <td>{ despesa.description }</td>\n                <td>{ despesa.tag }</td>\n                <td className=\"method\">{ despesa.method }</td>\n                <td className=\"value\">{ despesa.value }</td>\n                <td className=\"currency-name\">\n                  { despesa.exchangeRates[despesa.currency].name }\n                </td>\n                <td>\n                  { (Number(despesa.exchangeRates[despesa.currency].ask).toFixed(2)) }\n                </td>\n                <td className=\"value-BR\">\n                  {\n                    Number(despesa.value * (despesa.exchangeRates[despesa.currency].ask))\n                      .toFixed(2)\n                  }\n                </td>\n                <td>Real</td>\n                <td>\n                  <button type=\"button\">\n                    Editar/Excluir\n                  </button>\n                </td>\n              </tr>))\n          }\n        </tbody>\n      </table>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  despesas: state.wallet.expenses,\n});\n\nGastos.propTypes = {\n  despesas: PropTypes.string.isRequired,\n};\n\nexport default connect(mapStateToProps, null)(Gastos);\n","import React from 'react';\nimport Header from '../components/header/header';\nimport FormDespesas from '../components/FormDespesas';\nimport Tabela from '../components/tabela/Tabela';\n\nclass Wallet extends React.Component {\n  render() {\n    return (\n      <div>\n        <Header />\n        <FormDespesas />\n        <Tabela />\n      </div>\n    );\n  }\n}\n\nexport default Wallet;\n","import React from 'react';\nimport { Route, Switch } from 'react-router-dom';\nimport Login from './pages/Login';\nimport Wallet from './pages/Wallet';\n\nfunction App() {\n  return (\n    <Switch>\n      <Route exact path=\"/trybewallet\" component={ Login } />\n      <Route path=\"/carteira\" component={ Wallet } />\n    </Switch>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","// Esse reducer será responsável por tratar as informações da pessoa usuária\n\nconst INITIAL_USER = {\n  email: '',\n};\n\nexport default function user(state = INITIAL_USER, action) {\n  switch (action.type) {\n  case 'NEW_EMAIL':\n    return {\n      ...state,\n      email: action.state.email };\n  default:\n    return state;\n  }\n}\n","// Esse reducer será responsável por tratar o todas as informações relacionadas as despesas\n\nconst INITIAL_WALLET = {\n  currencies: [],\n  expenses: [],\n};\n\nexport default function wallet(state = INITIAL_WALLET, action) {\n  switch (action.type) {\n  case 'NEW_EXPENSE':\n    return {\n      ...state,\n      expenses: [\n        ...state.expenses,\n        action.despesa],\n    };\n\n  case 'RECEIVE_CURRENCIE':\n    return { ...state,\n      currencies: Object.keys(action.payload).filter((current) => current !== 'USDT'),\n    };\n\n  default:\n    return state;\n  }\n}\n","import { combineReducers } from 'redux';\nimport user from './user';\nimport wallet from './wallet';\n\n// Configure os seus reducers.\n// ATENÇÃO: você obrigatoriamente tem que utilizar as chaves \"user\" e \"wallet\" no seu estado global\n\nconst reducer = combineReducers({ user, wallet });\n\nexport default reducer;\n","import { createStore, applyMiddleware } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\nimport reducer from '../reducers';\n\nconst store = createStore(\n  reducer,\n  composeWithDevTools(\n    applyMiddleware(thunk),\n  ),\n);\n\nexport default store;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter, HashRouter } from 'react-router-dom';\nimport './index.css';\nimport { Provider } from 'react-redux';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport store from './store/store';\n\nReactDOM.render(\n  <Provider store={ store }>\n    <HashRouter>\n      <App />\n    </HashRouter>\n  </Provider>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}